-- üõ† Khai b√°o d·ªãch v·ª•
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart, humanoid
local LastQuest = nil  -- L∆∞u nhi·ªám v·ª• cu·ªëi c√πng ƒë√£ nh·∫≠n

local function onCharacterAdded(char)
    character = char
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoid = character:FindFirstChildOfClass("Humanoid")
end

onCharacterAdded(character)
player.CharacterAdded:Connect(onCharacterAdded)

-- üñ• Load Fluent UI
local Library = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveData = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()

if not Library then
    warn("Fluent UI kh√¥ng t·∫£i ƒë∆∞·ª£c!")
    return
end

local Window = Library:CreateWindow({
    Title = "Knight Hub",
    SubTitle = "By HungK",
    TabWidth = 160,
    Size = UDim2.fromOffset(480, 370),
    Acrylic = true,
    Theme = "Dark"
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main Farm" })
}

-- üéõÔ∏è Th√™m Toggle Auto Quest
local Toggle = Tabs.Main:AddToggle("AutoQuest", { Title = "Auto Quest", Default = false })
_G.AutoQuest = false  

Toggle:OnChanged(function()
    _G.AutoQuest = Toggle.Value  
    if _G.AutoQuest then
        task.spawn(function()
            while _G.AutoQuest do
                GetQuest()
                task.wait(1.5)
            end
        end)
    end
end)

-- üèÉ‚Äç‚ôÇÔ∏è Tween ƒë·∫øn v·ªã tr√≠ m∆∞·ª£t h∆°n
function TweenToPosition(targetPosition)
    if not humanoidRootPart or not humanoid then return end

    local distance = (targetPosition - humanoidRootPart.Position).Magnitude
    if distance < 5 then return end  -- Tr√°nh tween khi ƒë√£ g·∫ßn v·ªã tr√≠

    local tweenTime = math.min(distance / 250, 5)  -- Gi·ªõi h·∫°n th·ªùi gian tween
    local tweenInfo = TweenInfo.new(tweenTime, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
    local tween = TweenService:Create(humanoidRootPart, tweenInfo, { CFrame = CFrame.new(targetPosition) })

    tween:Play()
    tween.Completed:Wait()
    humanoidRootPart.CFrame = CFrame.new(targetPosition)
end

-- üìå H√†m ki·ªÉm tra nhi·ªám v·ª• hi·ªán t·∫°i
function HasActiveQuest()
    local questFrame = player.PlayerGui:FindFirstChild("Main") and player.PlayerGui.Main:FindFirstChild("Quest")
    return questFrame and questFrame.Visible
end

-- üèÜ Nh·∫≠n nhi·ªám v·ª• (Ch·ªâ nh·∫≠n l·∫°i khi c√≥ nhi·ªám v·ª• m·ªõi)
function GetQuest()
    if not player.Data or not player.Data:FindFirstChild("Level") then return end
    if HasActiveQuest() and LastQuest then return end  -- Gi·ªØ nhi·ªám v·ª• c≈© n·∫øu ƒë√£ c√≥

    local level = player.Data.Level.Value  
    local quests = {
        {1, 9, "BanditQuest1", 1, CFrame.new(1050, 16, 1540)},
        {10, 14, "JungleQuest", 1, CFrame.new(-1600, 36, 150)},
        {15, 29, "JungleQuest", 2, CFrame.new(-1600, 36, 150)},
        {30, 39, "BuggyQuest1", 1, CFrame.new(-1130, 4, 3820)},
        {40, 59, "BuggyQuest1", 2, CFrame.new(-1140.176, 4.752, 3827.405)}
    }

    local NameQuest, LevelQ, CFQ = nil, nil, nil
    for _, quest in ipairs(quests) do
        if level >= quest[1] and level <= quest[2] then
            NameQuest, LevelQ, CFQ = quest[3], quest[4], quest[5]
            break
        end
    end

    if not NameQuest then return end

    -- Ch·ªâ nh·∫≠n nhi·ªám v·ª• m·ªõi n·∫øu kh√°c nhi·ªám v·ª• tr∆∞·ªõc ƒë√≥
    if LastQuest ~= NameQuest then
        LastQuest = NameQuest  -- C·∫≠p nh·∫≠t nhi·ªám v·ª• ƒë√£ nh·∫≠n

        -- üîÑ Di chuy·ªÉn ƒë·∫øn NPC
        TweenToPosition(CFQ.Position)

        -- üèÅ Ki·ªÉm tra n·∫øu ƒë√£ ƒë·∫øn v·ªã tr√≠ NPC tr∆∞·ªõc khi nh·∫≠n nhi·ªám v·ª•
        if (humanoidRootPart.Position - CFQ.Position).Magnitude > 5 then return end

        -- Nh·∫≠n nhi·ªám v·ª• m·ªõi
        pcall(function()
            ReplicatedStorage.Remotes.CommF_:InvokeServer("StartQuest", NameQuest, LevelQ)
        end)
    end
end
